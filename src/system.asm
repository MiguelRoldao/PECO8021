;
; system.asm
;
; Created: 2021 April 29th
; Author : Diaff
;

	.equ	PAD0 = 0x00


	.dseg
fontptr:
	.byte	2
iallocdata:
	.byte	64			; 32 memory elements
iallocsize:
	.byte	64			; 32 len
	; TODO: implement allocation algorythm
	
	.cseg

	.equ	SYSFONTSIZE = 0x305
sys_font: .db \
	0x06, 0x04, 0x08, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44, 0x04, 0x00, 0x0a, 0xa0, 0x00,\
	0x00, 0x0a, 0xea, 0xea, 0x00, 0x04, 0xec, 0x6e, 0x00, 0x0a, 0x24, 0x8a, 0x00, 0x04, 0xa4, 0x86,\
	0x00, 0x04, 0x40, 0x00, 0x00, 0x02, 0x44, 0x42, 0x00, 0x08, 0x44, 0x48, 0x00, 0x0a, 0x4a, 0x00,\
	0x00, 0x00, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x04,\
	0x00, 0x02, 0x44, 0x48, 0x00, 0x06, 0xaa, 0xac, 0x00, 0x04, 0xc4, 0x4e, 0x00, 0x0c, 0x24, 0x8e,\
	0x00, 0x0e, 0x24, 0x2c, 0x00, 0x06, 0xaa, 0xe2, 0x00, 0x0e, 0x8e, 0x2c, 0x00, 0x06, 0x8e, 0xac,\
	0x00, 0x0e, 0x22, 0x44, 0x00, 0x06, 0xae, 0xac, 0x00, 0x06, 0xae, 0x2c, 0x00, 0x00, 0x40, 0x04,\
	0x00, 0x00, 0x40, 0x04, 0x80, 0x00, 0x48, 0x40, 0x00, 0x00, 0xe0, 0xe0, 0x00, 0x00, 0x42, 0x40,\
	0x00, 0x0e, 0x26, 0x04, 0x00, 0x06, 0xaa, 0x86, 0x00, 0x0e, 0xae, 0xaa, 0x00, 0x0e, 0xac, 0xae,\
	0x00, 0x06, 0x88, 0x86, 0x00, 0x0c, 0xaa, 0xac, 0x00, 0x0e, 0x8c, 0x8e, 0x00, 0x0e, 0x8c, 0x88,\
	0x00, 0x06, 0x88, 0xa6, 0x00, 0x0a, 0xae, 0xaa, 0x00, 0x0e, 0x44, 0x4e, 0x00, 0x0e, 0x44, 0x4c,\
	0x00, 0x0a, 0xac, 0xaa, 0x00, 0x08, 0x88, 0x8e, 0x00, 0x0e, 0xee, 0xaa, 0x00, 0x0a, 0xee, 0xea,\
	0x00, 0x0e, 0xaa, 0xae, 0x00, 0x0e, 0xae, 0x88, 0x00, 0x0e, 0xaa, 0xac, 0x20, 0x0e, 0xac, 0xaa,\
	0x00, 0x06, 0x8e, 0x2c, 0x00, 0x0e, 0x44, 0x44, 0x00, 0x0a, 0xaa, 0xae, 0x00, 0x0a, 0xaa, 0xa4,\
	0x00, 0x0a, 0xae, 0xee, 0x00, 0x0a, 0xa4, 0xaa, 0x00, 0x0a, 0xaa, 0x44, 0x00, 0x0e, 0x24, 0x8e,\
	0x00, 0x06, 0x44, 0x46, 0x00, 0x08, 0x44, 0x42, 0x00, 0x0c, 0x44, 0x4c, 0x00, 0x04, 0xa0, 0x00,\
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x6a, 0xae, 0x00, 0x08, 0xca, 0xae,\
	0x00, 0x00, 0x68, 0x86, 0x00, 0x02, 0x6a, 0xae, 0x00, 0x00, 0x4a, 0xec, 0x00, 0x06, 0x8c, 0x88,\
	0x00, 0x00, 0x6a, 0xa6, 0xc0, 0x08, 0xca, 0xaa, 0x00, 0x04, 0x04, 0x44, 0x00, 0x04, 0x04, 0x44,\
	0xc0, 0x08, 0xaa, 0xca, 0x00, 0x04, 0x44, 0x46, 0x00, 0x00, 0xce, 0xea, 0x00, 0x00, 0xca, 0xaa,\
	0x00, 0x00, 0xea, 0xae, 0x00, 0x00, 0xca, 0xac, 0x80, 0x00, 0x6a, 0xa6, 0x20, 0x00, 0xac, 0x88,\
	0x00, 0x00, 0x68, 0x6c, 0x00, 0x04, 0xe4, 0x46, 0x00, 0x00, 0xaa, 0xa6, 0x00, 0x00, 0xaa, 0xa4,\
	0x00, 0x00, 0xaa, 0xee, 0x00, 0x00, 0xa4, 0xaa, 0x00, 0x00, 0xaa, 0xa6, 0xc0, 0x00, 0xe2, 0xce,\
	0x00, 0x06, 0x4c, 0x46, 0x00, 0x04, 0x44, 0x44, 0x00, 0x0c, 0x46, 0x4c, 0x00, 0x00, 0xc6, 0x00,\
	0x00, 0x06, 0x84, 0x86, 0x00, 0x06, 0x88, 0x86, 0xc0, 0x0a, 0x0a, 0xae, 0x00, 0x06, 0x0e, 0xec,\
	0x00, 0x4a, 0x06, 0xae, 0x00, 0x0a, 0x06, 0xae, 0x00, 0x0c, 0x06, 0xae, 0x00, 0x04, 0x06, 0xae,\
	0x00, 0x00, 0x68, 0x86, 0xc0, 0x4a, 0x0e, 0xec, 0x00, 0x0a, 0x0e, 0xec, 0x00, 0x0c, 0x0e, 0xec,\
	0x00, 0x0a, 0x04, 0x44, 0x00, 0x4a, 0x04, 0x44, 0x00, 0x0c, 0x04, 0x44, 0x00, 0xa0, 0xea, 0xea,\
	0x00, 0x40, 0xea, 0xea, 0x00, 0x60, 0xec, 0x8e, 0x00, 0x00, 0x06, 0xec, 0x00, 0x06, 0xce, 0xce,\
	0x00, 0x4a, 0x0e, 0xae, 0x00, 0x0a, 0x0e, 0xae, 0x00, 0x0c, 0x0e, 0xae, 0x00, 0x4a, 0x0a, 0xae,\
	0x00, 0x0c, 0x0a, 0xae, 0x00, 0x0a, 0x0a, 0xa6, 0xc0, 0xa0, 0xea, 0xae, 0x00, 0xa0, 0xaa, 0xae,\
	0x00, 0x04, 0xe8, 0xe4, 0x00, 0x04, 0xa8, 0xce, 0x00, 0x0a, 0xa4, 0xe4, 0x00, 0x0c, 0xaa, 0xcc,\
	0xc0, 0x02, 0x4e, 0x44, 0x80, 0x06, 0x06, 0xae, 0x00, 0x06, 0x04, 0x44, 0x00, 0x06, 0x0e, 0xae,\
	0x00, 0x06, 0x0a, 0xae, 0x00, 0x0e, 0x0c, 0xaa, 0x00, 0xe0, 0xca, 0xaa, 0x00, 0x0c, 0xe0, 0x00,\
	0x00, 0x0c, 0xc0, 0x00, 0x00, 0x04, 0x0c, 0x8e, 0x00, 0x00, 0x0e, 0x80, 0x00, 0x00, 0x0e, 0x20,\
	0x00, 0x04, 0xee, 0x00, 0x00, 0x00, 0x0e, 0xe4, 0x00, 0x04, 0x04, 0x44, 0x00, 0x02, 0x6e, 0x62,\
	0x00, 0x08, 0xce, 0xc8, 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5f, 0x5f, 0x5f,\
	0x5f, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x44, 0x44, 0x44, 0x4c, 0xc4, 0x44, 0x66, 0x6e, 0x66,\
	0x66, 0x00, 0x0c, 0x66, 0x66, 0x00, 0x08, 0xc4, 0x44, 0x66, 0x6e, 0xe6, 0x66, 0x66, 0x66, 0x66,\
	0x66, 0x00, 0x0c, 0xe6, 0x66, 0x66, 0x6e, 0xc0, 0x00, 0x66, 0x6c, 0x00, 0x00, 0x44, 0x4c, 0x80,\
	0x00, 0x00, 0x08, 0x44, 0x44, 0x44, 0x43, 0x00, 0x00, 0x44, 0x4f, 0x00, 0x00, 0x00, 0x0f, 0x44,\
	0x44, 0x44, 0x47, 0x44, 0x44, 0x00, 0x0f, 0x00, 0x00, 0x44, 0x4f, 0x44, 0x44, 0x44, 0x47, 0x74,\
	0x44, 0x66, 0x67, 0x66, 0x66, 0x66, 0x67, 0x30, 0x00, 0x00, 0x03, 0x76, 0x66, 0x66, 0x6f, 0xf0,\
	0x00, 0x00, 0x0f, 0xf6, 0x66, 0x66, 0x67, 0x76, 0x66, 0x00, 0x0f, 0xf0, 0x00, 0x66, 0x6f, 0xf6,\
	0x66, 0x44, 0x4f, 0xf0, 0x00, 0x66, 0x6f, 0x00, 0x00, 0x00, 0x0f, 0xf4, 0x44, 0x00, 0x0f, 0x66,\
	0x66, 0x66, 0x63, 0x00, 0x00, 0x44, 0x73, 0x00, 0x00, 0x00, 0x03, 0x74, 0x44, 0x00, 0x03, 0x66,\
	0x66, 0x66, 0x6f, 0x66, 0x66, 0x44, 0x4f, 0xf4, 0x44, 0x44, 0x48, 0x00, 0x00, 0x00, 0x03, 0x44,\
	0x44, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0x33, 0x33, 0x33,\
	0x33, 0xff, 0xff, 0x00, 0x00, PAD0



;; Description
; Set a section of the internal SRAM to a specific byte
;; Arguments
; r3:r2 - sram pointer
; r5:r4 - length of data to copy in bytes
; r6 - value to set the ram to
sys_setram:
	push	ZL
	push	ZH

	movw	ZH:ZL, r3:r2
	add	r4, r2
	adc	r5, r3
	
_sys_setram_loop:
	st	Z+, r6

	cp	ZL, r4
	brne	_sys_setram_loop
	cp	ZH, r5
	brne	_sys_setram_loop

	pop	ZH
	pop	ZL
	ret

;; Description
; Copies data from internal flash memory to internal sram
;; Arguments
; r3:r2 - src pointer (prog mem x16)
; r5:r4 - dst pointer (data mem x8)
; r7:r6 - data lenght to copy in bytes
sys_copyflash:
	push	ZL
	push	ZH
	push	YL
	push	YH
	
	clr	YL
	clr	YH
	lsl	r2
	adc	YL, RZERO
	lsl	r3
	adc	YH, RZERO
	add	r3, YL
	out	CPU_RAMPZ, YH				; multiply pointer by 2 (make it byte accessible), and calculate RAMPZ
	
	movw	Z, r3:r2				; load flash pointer to Z
	movw	Y, r5:r4				; load sram pointer to Y
	
	add	r6, YL
	adc	r7, YH					; calculate pointer limit
	
_sys_copyflash_loop:
	lpm	r2, Z+
	st	Y+, r2
	
	cp	YL, r6
	brne	_sys_copyflash_loop
	cp	YH, r7
	brne	_sys_copyflash_loop
	
	pop	YH
	pop	YL
	pop	ZH
	pop	ZL
	ret


;; Description
; Stores pointer to new font to be used in memory, for
; other system functions.
;; Arguments
; r3:r2 - new font tileset pointer
sys_setfont:
	push	ZL
	push	ZH
	
	ldi	ZL, LOW(fontptr)
	ldi	ZH, HIGH(fontptr)
	st	Z+, r2
	st	Z+, r3
	
	pop	ZH
	pop	ZL
	ret


peco:	.db	"P", 0x7F, "CO  8021", 0, PAD0



sys_print_prog:
	mov	r7, r1
	rjmp	sys_print
	
sys_print_data:
	push	r16
	ldi	r16, 1
	mov	r7, r16
	pop	r16
	rjmp	sys_print
	
;; Arguments
; r0 - cursor x position
; r1 - cursor y position
; r3:r2 - ponter to null terminated string
; r4 - origin x position
; r5 - origin y position
; r6 - pal 0
; r7 - mode:
;	0 - print from program memory
;	1 - print from data memory
;	... - reserved

; TODO: implement cursor arguments
sys_print:
	push	ZL
	push	ZH
	push	XL
	push	XH					; pointer to font
	push	r16					; origin x-position
	push	r17					; origin y-position
	push	r18					; pal
	push	r19					; character to print in ascii
	push	r20					; cursor x-position
	push	r21					; cursor y-position
	push	r22					; tile size in bytes
	push	r23					; print mode
	
	mov	r23, r7
	andi	r23, 0b00000001
	movw	Z, r3:r2
	movw	r17:r16, r5:r4
	movw	r21:r20, r5:r4
	mov	r18, r6
	lds	XL, fontptr
	lds	XH, fontptr+1
	movw	r3:r2, X
	adiw	X, 4
	ld	r22, X
	sbiw	X, 4
	lsr	r22

_sys_print_charloop:
	cpi	r23, 0
	breq	_sys_print_charloop_prog
_sys_print_charloop_data:
	ld	r19, Z+
	rjmp	_sys_print_charloop_ctrl
_sys_print_charloop_prog:
	lpm	r19, Z+
	
_sys_print_charloop_ctrl:
	cpi	r19, 0x20
	brcs	_sys_print_ctrl
	
_sys_print_charloop_printable:
	subi	r19, 0x20
	mov	r0, r19
	movw	r3:r2, X
	movw	r5:r4, r21:r20
	mov	r6, r18
	call	gfx_drawtile
	add	r20, r22
	rjmp	_sys_print_charloop
	
_sys_print_done:
	pop	r23
	pop	r22
	pop	r21
	pop	r20
	pop	r19
	pop	r18
	pop	r17
	pop	r16
	pop	XH
	pop	XL
	pop	ZH
	pop	ZL
	ret
	
_sys_print_ctrl:
	push	ZL
	push	ZH
	ldi	ZL, LOW(_sys_print_ctrl_table)
	ldi	ZH, HIGH(_sys_print_ctrl_table)
	add	ZL, r19
	adc	ZH, r1
	ijmp
_sys_print_ctrl_table:
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_lf
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null
	rjmp	_sys_print_ctrl_null

_sys_print_ctrl_null:
	pop	ZH
	pop	ZL
	rjmp	_sys_print_done

_sys_print_ctrl_lf:
	pop	ZH
	pop	ZL
	
	adiw	X, 2
	ld	r0, X
	sbiw	X, 2
	
	mov	r20, r16
	add	r21, r0
	
	rjmp	_sys_print_charloop


sys_printnumber:



















